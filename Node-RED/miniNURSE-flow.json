[
    {
        "id": "7f1a0e143fa561dd",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "debug and mqtt does not work",
        "env": []
    },
    {
        "id": "dfe7fed51c1dc8f6",
        "type": "tab",
        "label": "UI Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc275690.07356",
        "type": "subflow",
        "name": "scheduler",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "be194cd9.78b218"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "8eb795c0.24899",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "6680ab33.f83b5c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "a0ba0058.4cf528",
                    "port": 0
                },
                {
                    "id": "3bf2be21.9401aa",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "800243a2e31d26f7",
        "type": "subflow",
        "name": "scheduler (2)",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "a7fc70e0b36cc972"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "036410022419979d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "85d64d38974aaddb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "5b8e527bcfec8a92",
                    "port": 0
                },
                {
                    "id": "6cea4d58e908c645",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "27abd95b3e73e668",
        "type": "subflow",
        "name": "scheduler (3)",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "8d334e8e2f183720"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "2a4272d64e5f4ed6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "e31a79e5337ab316",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "300fedf379e1b1d8",
                    "port": 0
                },
                {
                    "id": "86edc33fa6a6d814",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "5e995f18491f6d9a",
        "type": "subflow",
        "name": "scheduler (4)",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "10a03b52e40621f9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "3ed5b02cd3f5b2de",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "a622a86c1cd19cfa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "5bea3174cf57ce49",
                    "port": 0
                },
                {
                    "id": "4ac6e515f7a1ad74",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "bcb5b292dd0377a3",
        "type": "subflow",
        "name": "scheduler (5)",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "931762fb92a6ab87"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "2330b5adafaceddc",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "04eedc3df8fe2ca0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "a71c62c3be502587",
                    "port": 0
                },
                {
                    "id": "e2f30b7dbe9a3748",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "f83587ca79ed3e18",
        "type": "subflow",
        "name": "scheduler (6)",
        "info": "A scheduler that repeatedly executes\nschedules put in as an array of objects\nas a ```msg.payload``` in the format of:\n```\n[\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"time\": \"08:30\"\n  },\n  {\n    \"item\": \"test\",\n    \"command\": \"OFF\",\n    \"time\": \"19:45\"\n  }\n]\n```\nEach schedule object can also contain an optional ```days``` property:\n```\n  {\n    \"item\": \"test\",\n    \"command\": \"ON\",\n    \"days\": [1,2,6,7],\n    \"time\": \"08:30\"\n  }\n```\nthe ```days property``` has the format of\nan array. Each day that the schedule object \nshould be executed on has to be in the array.\nThe week starts with monday(1) and ends with\nsunday(7). So the example above would only be\nexecuted on monday, tuesday, saturday and\nsunday.\nYou can mix objects with and without a\ndays property in one schedule array.\n\nSending an **empty array** as a\n```msg.payload``` to the subflow will\nreset it.\nThe second output is a debug.\nSending a ```msg.payload``` string of **\"debug\"**\nwill send an object of the schedule and the\ncorresponding timers that are scheduled\nto this output.\nAt schedule time a ```msg``` object will be send\nfrom the first output. The command will be\npassed as the ```msg.payload```, the item in\n```msg.item``` and the original schedule object\nin ```msg.original```.\nThe subflows status will show the next item to \nbe executed once a schedule is set.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "e1395bdeb1c61e68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 180,
                "wires": [
                    {
                        "id": "ddffb43ec8233ba0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "5e7b576b33fd94f7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#FFAAAA",
        "inputLabels": [
            "schedule input"
        ],
        "outputLabels": [
            "command output",
            ""
        ],
        "icon": "node-red/timer.svg",
        "status": {
            "x": 1320,
            "y": 360,
            "wires": [
                {
                    "id": "201167bd7b96aa5b",
                    "port": 0
                },
                {
                    "id": "d149bf64d5ba28b3",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "732cda7a4ca2e5a1",
        "type": "group",
        "z": "7f1a0e143fa561dd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ac9ff6d0a0e02ce6",
            "8d8caee57da4cf7c",
            "c5dda8c7c25f071a",
            "3789d5c2f4c89ab8",
            "e782b533f8355bdf",
            "e3ddc07ba6b52aca",
            "920c742796e1e8a2",
            "222c5e872a1f319c",
            "e5c2bdd260a85556",
            "12588955817551b2",
            "be1d0676b230d757",
            "2ecb6edea3a102b3",
            "89718abc3a1128d7",
            "3ddaefcfe0b4a1e6",
            "67a06f5642185da2",
            "d2e94df21ec5ee24",
            "d4c92a5276c809f5",
            "b8206d096c109556",
            "027e2729c63a5646",
            "38dfef8347ef9f78",
            "e255554985613658",
            "e483dae643d1dd1a",
            "36f1f5dc05522ab2",
            "bf411d37c20d0a07",
            "59c42756e8e0a6b9",
            "29a5028a2dab03d5",
            "2ea5a21dcc971131",
            "b2d1b2c1f6fbe42a",
            "b8d6186c1918c869",
            "b2f5865088ce6c32",
            "c24e216588f29be9",
            "0afe2c957db7b5b0",
            "ecd9d02e6782d24f",
            "f368d564d26eec06",
            "0d6e0e769b6d3d89"
        ],
        "x": 214,
        "y": 1019,
        "w": 1372,
        "h": 582
    },
    {
        "id": "290dc16118e39c21",
        "type": "group",
        "z": "7f1a0e143fa561dd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90c0c3ddb4e55f34",
            "54e92541645cbc0c",
            "133466153ae3984f",
            "44a19f235d3b4953",
            "880c86a10d22da2b"
        ],
        "x": 274,
        "y": 159,
        "w": 472,
        "h": 142
    },
    {
        "id": "be979b25b7dab37a",
        "type": "group",
        "z": "7f1a0e143fa561dd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d3c9b5f7ddbc6475",
            "8db2b073f92f35ce",
            "7ba7ed8c0e8e3784",
            "42d792911d87f35a",
            "5d0c6e774c68117a",
            "98ae72becc35a221",
            "e3acfa9df11959be",
            "49535736b0a51eae",
            "834a9f0b4c5f2ba1",
            "9f5c4b418784af13",
            "7c64a87a1fe56da6",
            "e45accd051f957e9",
            "b0bda2e5730a623e",
            "6ce3c7d556f2330b",
            "5f471442821be58c",
            "585333964a1cceec",
            "af3d0f588806a8cf",
            "2df1340b070c82b4",
            "aa60f2ccf4111705",
            "8d9ee1a4d64d0c74",
            "8e34e97b2f6ed075",
            "b2759c2ac39525e5",
            "b9ded97defd67d69",
            "bd78137112499e9f",
            "fd8a9b1e02d6a4e2",
            "c35b095ee0c5bbcf",
            "a6170ab64e2ea3b8",
            "c9b9a2f5442f5c20",
            "4e344238952961e1",
            "e9b0873ef92bb112",
            "7d5804bc74c37dd1",
            "9ae72f72e87cf890",
            "a9d7a303130bec2c",
            "47ee0ad3129a8deb",
            "47a12f52e1eda558"
        ],
        "x": 174,
        "y": 339,
        "w": 1402,
        "h": 522
    },
    {
        "id": "37974fd28da1ed36",
        "type": "group",
        "z": "7f1a0e143fa561dd",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "87f4e87b2a463b4a",
            "f149570bac6bb5b4",
            "9de71e9ee10e0fe6",
            "06c0757b621ade17",
            "0dc01046749982b6",
            "ecdbf6baa55f03a1",
            "9c0dbf699ebdacf0",
            "53d12dc3473bcad0"
        ],
        "x": 1674,
        "y": 579,
        "w": 692,
        "h": 242
    },
    {
        "id": "79464c79620f0cbc",
        "type": "group",
        "z": "7f1a0e143fa561dd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "97fdae955f657b7b",
            "9eba93e7ca981ecc",
            "ab69f7d81ab5cc48"
        ],
        "x": 834,
        "y": 219,
        "w": 612,
        "h": 82
    },
    {
        "id": "dd5b95eac365fed1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.cpe.ku.ac.th",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "073c2961ae65026b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt://127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "915c8f6fe4e28b75",
        "type": "gauth",
        "name": "mini-nurse@mini-nurse-415817.iam.gserviceaccount.com"
    },
    {
        "id": "37ca2ed2ca44e205",
        "type": "ui_group",
        "name": "FirstBox",
        "tab": "1a27fc169a410ed3",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6dccc91d651d30a3",
        "type": "ui_group",
        "name": "AddClear",
        "tab": "1a27fc169a410ed3",
        "order": 3,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f931dd5cd06456e2",
        "type": "ui_group",
        "name": "Data",
        "tab": "1a27fc169a410ed3",
        "order": 7,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c4cf0f08ed23009",
        "type": "ui_group",
        "name": "Row",
        "tab": "1a27fc169a410ed3",
        "order": 4,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1a27fc169a410ed3",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4a8ce8df734eb922",
        "type": "ui_group",
        "name": "SecondBox",
        "tab": "1a27fc169a410ed3",
        "order": 6,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e46105809a99936d",
        "type": "ui_group",
        "name": "AddClear2",
        "tab": "1a27fc169a410ed3",
        "order": 8,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "63eae8cc7196ee87",
        "type": "ui_group",
        "name": "Data2",
        "tab": "1a27fc169a410ed3",
        "order": 9,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6deb2012da48db30",
        "type": "ui_group",
        "name": "Row2",
        "tab": "1a27fc169a410ed3",
        "order": 10,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d9660443f1466297",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#5db075",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#5db075",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#5db075",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#5db075",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#f5f4fb",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#90c9a1",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#5db075",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "miniNURSE",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "18cf0d822756d9e4",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "ec6de2b6e73e648a",
        "order": 9,
        "width": "6",
        "height": "1"
    },
    {
        "id": "c10e75cf0bf90fe2",
        "type": "ui_group",
        "name": "divider",
        "tab": "1a27fc169a410ed3",
        "order": 5,
        "disp": false,
        "width": 18,
        "collapse": false,
        "className": ""
    },
    {
        "id": "357e54f120e057a0",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "16c919c5292bd89b",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "0833111ad3e27a52",
        "type": "ui_group",
        "name": "CurrentTime",
        "tab": "1a27fc169a410ed3",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1372e1eea1e90201",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "6dccc91d651d30a3",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "3ecdb4e4f3cbc98a",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "6dccc91d651d30a3",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "70b9f77fcf5ad4b2",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "6dccc91d651d30a3",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "52faa8a3d400b5ed",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "6dccc91d651d30a3",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "d01e967a35692331",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "6dccc91d651d30a3",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "947c858380fbae68",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "c10e75cf0bf90fe2",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "073b3d875d453f6a",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "c10e75cf0bf90fe2",
        "order": 3,
        "width": 18,
        "height": 1
    },
    {
        "id": "2902c14147ffeab7",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "c10e75cf0bf90fe2",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "b9baac15fce3c664",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "e46105809a99936d",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "087ef7b23e9fc896",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "e46105809a99936d",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "6eb7d472e7b007dd",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "e46105809a99936d",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "d3d3a0ad67a8277a",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "e46105809a99936d",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "99e7ed9b8672e3b0",
        "type": "ui_spacer",
        "z": "7f1a0e143fa561dd",
        "name": "spacer",
        "group": "e46105809a99936d",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "f476595.aa436a8",
        "type": "function",
        "z": "dc275690.07356",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "cd6382ee.28d1c8"
            ]
        ]
    },
    {
        "id": "a0ba0058.4cf528",
        "type": "function",
        "z": "dc275690.07356",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7f1ec532.7fc8bc",
        "type": "function",
        "z": "dc275690.07356",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "a0ba0058.4cf528",
                "f476595.aa436a8"
            ]
        ]
    },
    {
        "id": "694a5ae3.e4714c",
        "type": "inject",
        "z": "dc275690.07356",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "a0ba0058.4cf528",
                "cf9ed7a2.81f21"
            ]
        ]
    },
    {
        "id": "be194cd9.78b218",
        "type": "switch",
        "z": "dc275690.07356",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "6680ab33.f83b5c"
            ],
            [
                "3bf2be21.9401aa"
            ]
        ]
    },
    {
        "id": "8eb795c0.24899",
        "type": "change",
        "z": "dc275690.07356",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "cd6382ee.28d1c8",
        "type": "switch",
        "z": "dc275690.07356",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "7e108ed9.acbd88"
            ],
            [
                "a0ba0058.4cf528",
                "280402d5.27b2f6",
                "ab8f82a4.0079b"
            ]
        ]
    },
    {
        "id": "6680ab33.f83b5c",
        "type": "change",
        "z": "dc275690.07356",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "cf9ed7a2.81f21",
        "type": "trigger",
        "z": "dc275690.07356",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "f476595.aa436a8"
            ]
        ]
    },
    {
        "id": "7e108ed9.acbd88",
        "type": "change",
        "z": "dc275690.07356",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "280402d5.27b2f6",
        "type": "trigger",
        "z": "dc275690.07356",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "f476595.aa436a8"
            ]
        ]
    },
    {
        "id": "ab8f82a4.0079b",
        "type": "function",
        "z": "dc275690.07356",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "8eb795c0.24899"
            ]
        ]
    },
    {
        "id": "3bf2be21.9401aa",
        "type": "function",
        "z": "dc275690.07356",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\" && typeof msg.payload[i].command !== \"boolean\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "7f1ec532.7fc8bc"
            ],
            [
                "ead6c623.14ffd"
            ]
        ]
    },
    {
        "id": "ead6c623.14ffd",
        "type": "trigger",
        "z": "dc275690.07356",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "a0ba0058.4cf528"
            ]
        ]
    },
    {
        "id": "2ac62c4aa656012b",
        "type": "function",
        "z": "800243a2e31d26f7",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "ba9a2365dfd58194"
            ]
        ]
    },
    {
        "id": "5b8e527bcfec8a92",
        "type": "function",
        "z": "800243a2e31d26f7",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "39f88b11410e8776",
        "type": "function",
        "z": "800243a2e31d26f7",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "5b8e527bcfec8a92",
                "2ac62c4aa656012b"
            ]
        ]
    },
    {
        "id": "93c9fe71d25df9b3",
        "type": "inject",
        "z": "800243a2e31d26f7",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "5b8e527bcfec8a92",
                "96850944bff6ee3a"
            ]
        ]
    },
    {
        "id": "a7fc70e0b36cc972",
        "type": "switch",
        "z": "800243a2e31d26f7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "85d64d38974aaddb"
            ],
            [
                "6cea4d58e908c645"
            ]
        ]
    },
    {
        "id": "036410022419979d",
        "type": "change",
        "z": "800243a2e31d26f7",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ba9a2365dfd58194",
        "type": "switch",
        "z": "800243a2e31d26f7",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "7d975bb4b6ba233c"
            ],
            [
                "5b8e527bcfec8a92",
                "72ac07e2a660db4a",
                "d2c71b3bcb89e808"
            ]
        ]
    },
    {
        "id": "85d64d38974aaddb",
        "type": "change",
        "z": "800243a2e31d26f7",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "96850944bff6ee3a",
        "type": "trigger",
        "z": "800243a2e31d26f7",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "2ac62c4aa656012b"
            ]
        ]
    },
    {
        "id": "7d975bb4b6ba233c",
        "type": "change",
        "z": "800243a2e31d26f7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "72ac07e2a660db4a",
        "type": "trigger",
        "z": "800243a2e31d26f7",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "2ac62c4aa656012b"
            ]
        ]
    },
    {
        "id": "d2c71b3bcb89e808",
        "type": "function",
        "z": "800243a2e31d26f7",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "036410022419979d"
            ]
        ]
    },
    {
        "id": "6cea4d58e908c645",
        "type": "function",
        "z": "800243a2e31d26f7",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\" && typeof msg.payload[i].command !== \"boolean\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "39f88b11410e8776"
            ],
            [
                "71c19f053ac94aa7"
            ]
        ]
    },
    {
        "id": "71c19f053ac94aa7",
        "type": "trigger",
        "z": "800243a2e31d26f7",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "5b8e527bcfec8a92"
            ]
        ]
    },
    {
        "id": "be4eb3ec955f38d4",
        "type": "function",
        "z": "27abd95b3e73e668",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "4a8ab1593a18d344"
            ]
        ]
    },
    {
        "id": "300fedf379e1b1d8",
        "type": "function",
        "z": "27abd95b3e73e668",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "2f55d989fa60d2c8",
        "type": "function",
        "z": "27abd95b3e73e668",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "300fedf379e1b1d8",
                "be4eb3ec955f38d4"
            ]
        ]
    },
    {
        "id": "03fdd59a799de1a2",
        "type": "inject",
        "z": "27abd95b3e73e668",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "300fedf379e1b1d8",
                "308beb98970292b4"
            ]
        ]
    },
    {
        "id": "8d334e8e2f183720",
        "type": "switch",
        "z": "27abd95b3e73e668",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "e31a79e5337ab316"
            ],
            [
                "86edc33fa6a6d814"
            ]
        ]
    },
    {
        "id": "2a4272d64e5f4ed6",
        "type": "change",
        "z": "27abd95b3e73e668",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4a8ab1593a18d344",
        "type": "switch",
        "z": "27abd95b3e73e668",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "1e3d58886812be0c"
            ],
            [
                "300fedf379e1b1d8",
                "dae1d22fb970656a",
                "775defad6bdb103e"
            ]
        ]
    },
    {
        "id": "e31a79e5337ab316",
        "type": "change",
        "z": "27abd95b3e73e668",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "308beb98970292b4",
        "type": "trigger",
        "z": "27abd95b3e73e668",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "be4eb3ec955f38d4"
            ]
        ]
    },
    {
        "id": "1e3d58886812be0c",
        "type": "change",
        "z": "27abd95b3e73e668",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "dae1d22fb970656a",
        "type": "trigger",
        "z": "27abd95b3e73e668",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "be4eb3ec955f38d4"
            ]
        ]
    },
    {
        "id": "775defad6bdb103e",
        "type": "function",
        "z": "27abd95b3e73e668",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "2a4272d64e5f4ed6"
            ]
        ]
    },
    {
        "id": "86edc33fa6a6d814",
        "type": "function",
        "z": "27abd95b3e73e668",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "2f55d989fa60d2c8"
            ],
            [
                "48ee767ee9cf2e30"
            ]
        ]
    },
    {
        "id": "48ee767ee9cf2e30",
        "type": "trigger",
        "z": "27abd95b3e73e668",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "300fedf379e1b1d8"
            ]
        ]
    },
    {
        "id": "fc2bee53a01b101f",
        "type": "function",
        "z": "5e995f18491f6d9a",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "a04147c12e693024"
            ]
        ]
    },
    {
        "id": "5bea3174cf57ce49",
        "type": "function",
        "z": "5e995f18491f6d9a",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f6753630484856ca",
        "type": "function",
        "z": "5e995f18491f6d9a",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "5bea3174cf57ce49",
                "fc2bee53a01b101f"
            ]
        ]
    },
    {
        "id": "12ce958116c2e85f",
        "type": "inject",
        "z": "5e995f18491f6d9a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "5bea3174cf57ce49",
                "9f71520edb537379"
            ]
        ]
    },
    {
        "id": "10a03b52e40621f9",
        "type": "switch",
        "z": "5e995f18491f6d9a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "a622a86c1cd19cfa"
            ],
            [
                "4ac6e515f7a1ad74"
            ]
        ]
    },
    {
        "id": "3ed5b02cd3f5b2de",
        "type": "change",
        "z": "5e995f18491f6d9a",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a04147c12e693024",
        "type": "switch",
        "z": "5e995f18491f6d9a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "b584e376ce50a77b"
            ],
            [
                "5bea3174cf57ce49",
                "21ce5e88fbbe24fa",
                "d08e0fd1a65ee4be"
            ]
        ]
    },
    {
        "id": "a622a86c1cd19cfa",
        "type": "change",
        "z": "5e995f18491f6d9a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9f71520edb537379",
        "type": "trigger",
        "z": "5e995f18491f6d9a",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "fc2bee53a01b101f"
            ]
        ]
    },
    {
        "id": "b584e376ce50a77b",
        "type": "change",
        "z": "5e995f18491f6d9a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "21ce5e88fbbe24fa",
        "type": "trigger",
        "z": "5e995f18491f6d9a",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "fc2bee53a01b101f"
            ]
        ]
    },
    {
        "id": "d08e0fd1a65ee4be",
        "type": "function",
        "z": "5e995f18491f6d9a",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "3ed5b02cd3f5b2de"
            ]
        ]
    },
    {
        "id": "4ac6e515f7a1ad74",
        "type": "function",
        "z": "5e995f18491f6d9a",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\" && typeof msg.payload[i].command !== \"boolean\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "f6753630484856ca"
            ],
            [
                "1a76d82213092954"
            ]
        ]
    },
    {
        "id": "1a76d82213092954",
        "type": "trigger",
        "z": "5e995f18491f6d9a",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "5bea3174cf57ce49"
            ]
        ]
    },
    {
        "id": "049967bed6cf88cc",
        "type": "function",
        "z": "bcb5b292dd0377a3",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "e36a102eb8804f85"
            ]
        ]
    },
    {
        "id": "a71c62c3be502587",
        "type": "function",
        "z": "bcb5b292dd0377a3",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e2b6b548ad1214a0",
        "type": "function",
        "z": "bcb5b292dd0377a3",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "a71c62c3be502587",
                "049967bed6cf88cc"
            ]
        ]
    },
    {
        "id": "7f57a40ace1426c4",
        "type": "inject",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "a71c62c3be502587",
                "0d3a449550d01f48"
            ]
        ]
    },
    {
        "id": "931762fb92a6ab87",
        "type": "switch",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "04eedc3df8fe2ca0"
            ],
            [
                "e2f30b7dbe9a3748"
            ]
        ]
    },
    {
        "id": "2330b5adafaceddc",
        "type": "change",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e36a102eb8804f85",
        "type": "switch",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "8d925081f7377e95"
            ],
            [
                "a71c62c3be502587",
                "8b519014e498cde7",
                "cabdb76e43110117"
            ]
        ]
    },
    {
        "id": "04eedc3df8fe2ca0",
        "type": "change",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "0d3a449550d01f48",
        "type": "trigger",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "049967bed6cf88cc"
            ]
        ]
    },
    {
        "id": "8d925081f7377e95",
        "type": "change",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8b519014e498cde7",
        "type": "trigger",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "049967bed6cf88cc"
            ]
        ]
    },
    {
        "id": "cabdb76e43110117",
        "type": "function",
        "z": "bcb5b292dd0377a3",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "2330b5adafaceddc"
            ]
        ]
    },
    {
        "id": "e2f30b7dbe9a3748",
        "type": "function",
        "z": "bcb5b292dd0377a3",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\" && typeof msg.payload[i].command !== \"boolean\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "e2b6b548ad1214a0"
            ],
            [
                "7153c078bf8932f8"
            ]
        ]
    },
    {
        "id": "7153c078bf8932f8",
        "type": "trigger",
        "z": "bcb5b292dd0377a3",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "a71c62c3be502587"
            ]
        ]
    },
    {
        "id": "93da372a463f9111",
        "type": "function",
        "z": "f83587ca79ed3e18",
        "name": "schedule function",
        "func": "const schedule = msg.payload;\nif(typeof msg.payload === \"undefined\") return null;\nlet scheduled = context.scheduled || [];\nlet todelete = [];\nscheduled.forEach((item,index) => {\n    if(!schedule.some(element => JSON.stringify(element) == JSON.stringify(item.schedule))){\n        clearTimeout(item.timer);\n        todelete.push(index);\n    }\n})\nscheduled = scheduled.filter((item,index) => !todelete.includes(index));\ncontext.scheduled = scheduled;\nschedule.forEach(element => {\n    const execute = element;\n    const time = new Date();\n    const timestamp = time.getTime();\n    const hour = time.getHours();\n    const minute = time.getMinutes();\n    const year = time.getFullYear();\n    const month = time.getMonth();\n    const day = time.getDate();\n    const inputS = execute.time.split(\":\");\n    const hourS = parseInt(inputS[0]);\n    const minuteS = parseInt(inputS[1]);\n    if(typeof hourS != \"number\" || typeof minuteS != \"number\") return null;\n    const timeS = new Date(year, month, day, hourS, minuteS);\n    const timestampS = timeS.getTime();\n    let timestampD = 0;\n    if(timestampS >= timestamp){\n        timestampD = timestampS - timestamp;\n    } else {\n        timestampD = (timestampS + 86400000) - timestamp;\n    }\n    let oldscheduled = context.scheduled;\n    if(!oldscheduled.some(element => JSON.stringify(element.schedule) == JSON.stringify(execute))){\n        const newtimer = setTimeout(()=>{\n            let newscheduled = context.scheduled;\n            const deleteindex = newscheduled.indexOf(newschedule);\n            newscheduled.splice(deleteindex,1);\n            node.send({payload:newschedule.schedule});\n            context.scheduled = newscheduled;\n        },timestampD);\n        const newschedule = {\n            runtime: timestampD,\n            timer: newtimer,\n            schedule: execute\n        };\n        oldscheduled.push(newschedule);\n        context.scheduled = oldscheduled;\n    }\n});\nconst sendscheduled = context.scheduled;\nmsg.topic = \"scheduled\";\nconst newmsg = sendscheduled.map(item => {\n    return {schedule:item.schedule,runtime:item.runtime}\n});\nmsg.payload = newmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 180,
        "wires": [
            [
                "e838cd66c0748768"
            ]
        ]
    },
    {
        "id": "201167bd7b96aa5b",
        "type": "function",
        "z": "f83587ca79ed3e18",
        "name": "get next schedule item",
        "func": "const schedule = flow.get(\"schedule\") || [];\nif(schedule.length === 0){\n    msg.payload = \"no schedule yet\";\n    return msg;\n}\nconst time = new Date();\nconst dayNames = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\nlet day = time.getDay();\nif (day === 0) { day = 7; }\nlet hour = String(time.getHours());\nlet minute = String(time.getMinutes());\nif(hour.length == 1) hour = \"0\" + hour;\nif(minute.length == 1) minute = \"0\" + minute;\nlet hmtime = hour + \":\" + minute;\nlet found = false;\nlet nextindex = 0;\nfor(let a=0; a<7; a++){\n    for(i=0;i<schedule.length;i++){\n        if(hmtime < schedule[i].time){\n            if(schedule[i].hasOwnProperty(\"days\")){\n                if(schedule[i].days.includes(day)){\n                    nextindex = i;\n                    found = true;\n                    break;\n                } else {\n                    continue;\n                }\n            } else {\n                nextindex = i;\n                found = true;\n                break;\n            }\n        } else {\n            continue;\n        }\n    }\n    if(found){break;}\n    if(a === 0){ hmtime = \"\"; }\n    if (day < 7) {\n        day += 1;\n    } else {\n        day = 1;\n    }\n}\nmsg.payload = schedule[nextindex].item + \", \" + schedule[nextindex].command + \", \" + dayNames[day-1] + \", \" + schedule[nextindex].time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "0f20281bb13245e3",
        "type": "function",
        "z": "f83587ca79ed3e18",
        "name": "sort schedule and save to flow",
        "func": "const oldschedule = msg.payload;\nlet newschedule = [];\noldschedule.forEach(element => {\n    let newindex = null;\n    if(newschedule.length > 0){\n        for(i=0;i<newschedule.length-1;i++){\n            if(element.time >= newschedule[i].time && element.time < newschedule[i+1].time){\n                newindex = i+1;\n            }\n        }\n        if(newindex !== null){\n            newschedule.splice(newindex,0,element);\n        } else if (element.time < newschedule[0].time){\n            newschedule.splice(0,0,element);\n        } else {\n            newschedule.push(element);\n        }\n    } else {\n        newschedule.push(element);\n    }\n});\nflow.set(\"schedule\",newschedule);\nmsg.payload = newschedule;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "201167bd7b96aa5b",
                "93da372a463f9111"
            ]
        ]
    },
    {
        "id": "8e6239307613cb81",
        "type": "inject",
        "z": "f83587ca79ed3e18",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "201167bd7b96aa5b",
                "1e6740ecff485d29"
            ]
        ]
    },
    {
        "id": "e1395bdeb1c61e68",
        "type": "switch",
        "z": "f83587ca79ed3e18",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "5e7b576b33fd94f7"
            ],
            [
                "d149bf64d5ba28b3"
            ]
        ]
    },
    {
        "id": "ddffb43ec8233ba0",
        "type": "change",
        "z": "f83587ca79ed3e18",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "original",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "original.command",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "item",
                "pt": "msg",
                "to": "original.item",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e838cd66c0748768",
        "type": "switch",
        "z": "f83587ca79ed3e18",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "scheduled",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "0f2e02c09f17d14d"
            ],
            [
                "201167bd7b96aa5b",
                "351bbbe6fc0b67e8",
                "0ab2520c4b91ec56"
            ]
        ]
    },
    {
        "id": "5e7b576b33fd94f7",
        "type": "change",
        "z": "f83587ca79ed3e18",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.schedule",
                "pt": "msg",
                "to": "schedule",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.scheduled",
                "pt": "msg",
                "to": "scheduled",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1e6740ecff485d29",
        "type": "trigger",
        "z": "f83587ca79ed3e18",
        "name": "",
        "op1": "[]",
        "op2": "schedule",
        "op1type": "json",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "93da372a463f9111"
            ]
        ]
    },
    {
        "id": "0f2e02c09f17d14d",
        "type": "change",
        "z": "f83587ca79ed3e18",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "scheduled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "351bbbe6fc0b67e8",
        "type": "trigger",
        "z": "f83587ca79ed3e18",
        "name": "",
        "op1": "",
        "op2": "schedule",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "93da372a463f9111"
            ]
        ]
    },
    {
        "id": "0ab2520c4b91ec56",
        "type": "function",
        "z": "f83587ca79ed3e18",
        "name": "today?",
        "func": "if (msg.payload.hasOwnProperty(\"days\")) {\n    const date = new Date();\n    let day = date.getDay();\n    if (day === 0) { day = 7; }\n    if (msg.payload.days.includes(day)) {\n        return msg;\n    } else {\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "ddffb43ec8233ba0"
            ]
        ]
    },
    {
        "id": "d149bf64d5ba28b3",
        "type": "function",
        "z": "f83587ca79ed3e18",
        "name": "validate input",
        "func": "let errorMsg = \"\";\nif(!Array.isArray(msg.payload)) {\n    errorMsg = \"msg.payload should be an array of schedule items\";\n    node.warn(errorMsg)\n    msg.payload = errorMsg;\n    return [null, msg];\n}\nfor(i=0;i<msg.payload.length;i++){\n    if(typeof msg.payload[i] !== \"object\") {\n        errorMsg = \"each array item should be an object\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].hasOwnProperty(\"item\") || !msg.payload[i].hasOwnProperty(\"command\") || !msg.payload[i].hasOwnProperty(\"time\")) {\n        errorMsg = \"each array item should contain a item, a command and time property\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].item !== \"string\") {\n        errorMsg = \"the items in each schedule should be given as a string\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(typeof msg.payload[i].command !== \"string\" && typeof msg.payload[i].command !== \"number\" && typeof msg.payload[i].command !== \"boolean\") {\n        errorMsg = \"the commands in each schedule should be given as a string or a number\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(!msg.payload[i].time.match(/[0-2]\\d\\:[0-5]\\d/g)) {\n        errorMsg = \"the time should be in hh:mm 24 hour format\";\n        node.warn(errorMsg)\n        msg.payload = errorMsg;\n        return [null, msg];\n    }\n    if(msg.payload[i].hasOwnProperty(\"days\")) {\n        if(!Array.isArray(msg.payload[i].days)) {\n            errorMsg = \"days should be given as an array of integers\";\n            node.warn(errorMsg)\n            msg.payload = errorMsg;\n            return [null, msg];\n        }\n        for(let c=0; c<msg.payload[i].days.length; c++){\n            if(typeof msg.payload[i].days[c] !== \"number\"){\n                errorMsg = \"days should be given as integers of type number\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n            if(msg.payload[i].days[c] < 1 || msg.payload[i].days[c] > 7){\n                errorMsg = \"days should be in the range of 1-7\";\n                node.warn(errorMsg)\n                msg.payload = errorMsg;\n                return [null, msg];\n            }\n        }\n    }\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "0f20281bb13245e3"
            ],
            [
                "8d1d2b60f88b6b8b"
            ]
        ]
    },
    {
        "id": "8d1d2b60f88b6b8b",
        "type": "trigger",
        "z": "f83587ca79ed3e18",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 760,
        "y": 300,
        "wires": [
            [
                "201167bd7b96aa5b"
            ]
        ]
    },
    {
        "id": "d3c9b5f7ddbc6475",
        "type": "ui_table",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "group": "37ca2ed2ca44e205",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "medicine",
                "title": "Medicine",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "details",
                "title": "Details",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "amount",
                "title": "Amount",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "hour_med",
                "title": "Hour",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "minute_med",
                "title": "Minute",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1140,
        "y": 600,
        "wires": [
            [
                "8db2b073f92f35ce",
                "7ba7ed8c0e8e3784",
                "c35b095ee0c5bbcf"
            ]
        ]
    },
    {
        "id": "8db2b073f92f35ce",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedRow",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7ba7ed8c0e8e3784",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Dashboard_Row\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "42d792911d87f35a"
            ]
        ]
    },
    {
        "id": "42d792911d87f35a",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "141d021b819b9557"
        ],
        "x": 1525,
        "y": 640,
        "wires": []
    },
    {
        "id": "5d0c6e774c68117a",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "group": "6dccc91d651d30a3",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Clear Table",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 720,
        "y": 640,
        "wires": [
            [
                "98ae72becc35a221",
                "bd78137112499e9f",
                "e9b0873ef92bb112"
            ]
        ]
    },
    {
        "id": "98ae72becc35a221",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "clearData",
        "func": "msg.payload = {\n    \"command\" : \"clearData\",\n    arguments: []\n}\n\nflow.set(\"medicine\", 0)\nflow.set(\"id\", 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 640,
        "wires": [
            [
                "d3c9b5f7ddbc6475"
            ]
        ]
    },
    {
        "id": "e3acfa9df11959be",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "group": "6dccc91d651d30a3",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Add medicine",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus-square",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 480,
        "wires": [
            [
                "49535736b0a51eae",
                "834a9f0b4c5f2ba1"
            ]
        ]
    },
    {
        "id": "49535736b0a51eae",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "addRow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "834a9f0b4c5f2ba1",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Dashboard_Data\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 500,
        "wires": [
            [
                "9f5c4b418784af13"
            ]
        ]
    },
    {
        "id": "9f5c4b418784af13",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "141d021b819b9557"
        ],
        "x": 605,
        "y": 500,
        "wires": []
    },
    {
        "id": "7c64a87a1fe56da6",
        "type": "ui_form",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "label": "",
        "group": "f931dd5cd06456e2",
        "order": 1,
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "Medicine",
                "value": "medicine",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Amount",
                "value": "amount",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Details",
                "value": "details",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Hour",
                "value": "hour_med",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Minute",
                "value": "minute_med",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "medicine": "",
            "amount": "",
            "details": "",
            "hour_med": "",
            "minute_med": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "e45accd051f957e9",
                "b0bda2e5730a623e",
                "4e344238952961e1"
            ]
        ]
    },
    {
        "id": "e45accd051f957e9",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "command",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 600,
        "wires": [
            [
                "5f471442821be58c"
            ]
        ]
    },
    {
        "id": "b0bda2e5730a623e",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data\",\"Dashboard_Row\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 560,
        "wires": [
            [
                "6ce3c7d556f2330b"
            ]
        ]
    },
    {
        "id": "6ce3c7d556f2330b",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "141d021b819b9557"
        ],
        "x": 565,
        "y": 560,
        "wires": []
    },
    {
        "id": "5f471442821be58c",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "addRow",
        "func": "var inp = msg.payload\nvar id = flow.get(\"id\") || 0\n\nid ++\ninp.id = id\nflow.set(\"id\", id)\n\nmsg.payload = {\n    command : \"addRow\",\n    arguments : [\n        [inp],\n        true\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 560,
        "wires": [
            [
                "8e34e97b2f6ed075",
                "fd8a9b1e02d6a4e2",
                "d3c9b5f7ddbc6475",
                "a6170ab64e2ea3b8"
            ]
        ]
    },
    {
        "id": "585333964a1cceec",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data\",\"Dashboard_Row\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 820,
        "wires": [
            [
                "af3d0f588806a8cf"
            ]
        ]
    },
    {
        "id": "af3d0f588806a8cf",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "141d021b819b9557"
        ],
        "x": 1055,
        "y": 820,
        "wires": []
    },
    {
        "id": "2df1340b070c82b4",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "group": "f931dd5cd06456e2",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "cancel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 560,
        "wires": [
            [
                "b0bda2e5730a623e"
            ]
        ]
    },
    {
        "id": "aa60f2ccf4111705",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "deleteRow",
        "func": "const row = flow.get(\"selectedRow\")\nmsg.payload = {\n    command : \"deleteRow\",\n    arguments : [row.id]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 780,
        "wires": [
            [
                "d3c9b5f7ddbc6475"
            ]
        ]
    },
    {
        "id": "8d9ee1a4d64d0c74",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "be979b25b7dab37a",
        "name": "debug 1 - jsonstring",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 500,
        "wires": []
    },
    {
        "id": "8e34e97b2f6ed075",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "be979b25b7dab37a",
        "name": "toVar",
        "func": "var inputObject = msg.payload;\nvar jsonString = JSON.stringify(inputObject.arguments[0][0]);\nmsg.payload = jsonString;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "8d9ee1a4d64d0c74"
            ]
        ]
    },
    {
        "id": "90c0c3ddb4e55f34",
        "type": "ui_template",
        "z": "7f1a0e143fa561dd",
        "g": "290dc16118e39c21",
        "group": "",
        "name": "toolbar",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<style>\n    md-toolbar {\n        background: linear-gradient(90deg, #6559B6 0%, #63B185 100%) !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 350,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "54e92541645cbc0c",
        "type": "ui_template",
        "z": "7f1a0e143fa561dd",
        "g": "290dc16118e39c21",
        "group": "c10e75cf0bf90fe2",
        "name": "divider",
        "order": 1,
        "width": 12,
        "height": 1,
        "format": "<div style=\"width: 60%; height: 100%; border: 5px white solid\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 510,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "133466153ae3984f",
        "type": "ui_template",
        "z": "7f1a0e143fa561dd",
        "g": "290dc16118e39c21",
        "group": "c10e75cf0bf90fe2",
        "name": "divider",
        "order": 4,
        "width": 12,
        "height": 1,
        "format": "<div style=\"width: 60%; height: 100%; border: 5px white solid\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b2759c2ac39525e5",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "b9ded97defd67d69"
            ]
        ]
    },
    {
        "id": "b9ded97defd67d69",
        "type": "file in",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "c9b9a2f5442f5c20"
            ]
        ]
    },
    {
        "id": "bd78137112499e9f",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 910,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fd8a9b1e02d6a4e2",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 920,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c35b095ee0c5bbcf",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "from table - jsonstring",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 560,
        "wires": []
    },
    {
        "id": "a6170ab64e2ea3b8",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 540,
        "wires": []
    },
    {
        "id": "c9b9a2f5442f5c20",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "read firstbox.txt to table",
        "func": "var parsedRows = [];\nvar rows = msg.payload.split('\\n');\n\nrows.forEach(function(row) {\n    row = row.trim();\n\n    if (row !== \"\") {\n        var parsedRow = JSON.parse(row);\n        var rowData = parsedRow.arguments[0][0];\n        parsedRows.push(rowData);\n    }\n});\n\nmsg.payload = parsedRows;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 540,
        "wires": [
            [
                "d3c9b5f7ddbc6475"
            ]
        ]
    },
    {
        "id": "ac9ff6d0a0e02ce6",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 1100,
        "wires": [
            [
                "8d8caee57da4cf7c"
            ]
        ]
    },
    {
        "id": "8d8caee57da4cf7c",
        "type": "file in",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 950,
        "y": 1100,
        "wires": [
            [
                "29a5028a2dab03d5"
            ]
        ]
    },
    {
        "id": "c5dda8c7c25f071a",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 950,
        "y": 1140,
        "wires": [
            [
                "0d6e0e769b6d3d89"
            ]
        ]
    },
    {
        "id": "3789d5c2f4c89ab8",
        "type": "ui_table",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "group": "4a8ce8df734eb922",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "activity",
                "title": "Activity",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "hour_activity",
                "title": "Hour",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "minute_activity",
                "title": "Minute",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1190,
        "y": 1380,
        "wires": [
            [
                "e782b533f8355bdf",
                "e3ddc07ba6b52aca"
            ]
        ]
    },
    {
        "id": "e782b533f8355bdf",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedRow",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "e3ddc07ba6b52aca",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Dashboard_Row2\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1420,
        "wires": [
            [
                "920c742796e1e8a2"
            ]
        ]
    },
    {
        "id": "920c742796e1e8a2",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "bd9cd6871c9fa8b1"
        ],
        "x": 1545,
        "y": 1420,
        "wires": []
    },
    {
        "id": "222c5e872a1f319c",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "group": "e46105809a99936d",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Clear Table",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 750,
        "y": 1380,
        "wires": [
            [
                "e5c2bdd260a85556",
                "2ea5a21dcc971131",
                "b8d6186c1918c869"
            ]
        ]
    },
    {
        "id": "e5c2bdd260a85556",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "clearData",
        "func": "msg.payload = {\n    \"command\" : \"clearData\",\n    arguments: []\n}\n\nflow.set(\"medicine\", 0)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1380,
        "wires": [
            [
                "3789d5c2f4c89ab8"
            ]
        ]
    },
    {
        "id": "12588955817551b2",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "group": "e46105809a99936d",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Touch Grass",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus-square",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 1160,
        "wires": [
            [
                "be1d0676b230d757",
                "2ecb6edea3a102b3"
            ]
        ]
    },
    {
        "id": "be1d0676b230d757",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "flow",
                "to": "addRow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2ecb6edea3a102b3",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Dashboard_Data2\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "89718abc3a1128d7"
            ]
        ]
    },
    {
        "id": "89718abc3a1128d7",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "bd9cd6871c9fa8b1"
        ],
        "x": 645,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3ddaefcfe0b4a1e6",
        "type": "ui_form",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "label": "",
        "group": "63eae8cc7196ee87",
        "order": 1,
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "Activity",
                "value": "activity",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Hour",
                "value": "hour_activity",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Minute",
                "value": "minute_activity",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "activity": "",
            "hour_activity": "",
            "minute_activity": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 290,
        "y": 1340,
        "wires": [
            [
                "67a06f5642185da2",
                "d2e94df21ec5ee24",
                "59c42756e8e0a6b9",
                "b2d1b2c1f6fbe42a"
            ]
        ]
    },
    {
        "id": "67a06f5642185da2",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "command",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1340,
        "wires": [
            [
                "b8206d096c109556"
            ]
        ]
    },
    {
        "id": "d2e94df21ec5ee24",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data2\",\"Dashboard_Row2\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "d4c92a5276c809f5"
            ]
        ]
    },
    {
        "id": "d4c92a5276c809f5",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "bd9cd6871c9fa8b1"
        ],
        "x": 595,
        "y": 1300,
        "wires": []
    },
    {
        "id": "b8206d096c109556",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "addRow",
        "func": "var inp = msg.payload\nvar id = flow.get(\"id\") || 0\n\nid ++\ninp.id = id\nflow.set(\"id\", id)\n\nmsg.payload = {\n    command : \"addRow\",\n    arguments : [\n        [inp],\n        true\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1300,
        "wires": [
            [
                "3789d5c2f4c89ab8",
                "c5dda8c7c25f071a",
                "ecd9d02e6782d24f"
            ]
        ]
    },
    {
        "id": "027e2729c63a5646",
        "type": "change",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data2\",\"Dashboard_Row2\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1560,
        "wires": [
            [
                "38dfef8347ef9f78"
            ]
        ]
    },
    {
        "id": "38dfef8347ef9f78",
        "type": "link out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "bd9cd6871c9fa8b1"
        ],
        "x": 1085,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e255554985613658",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "group": "63eae8cc7196ee87",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "cancel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "d2e94df21ec5ee24"
            ]
        ]
    },
    {
        "id": "e483dae643d1dd1a",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "group": "6deb2012da48db30",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Delete Row",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 750,
        "y": 1540,
        "wires": [
            [
                "027e2729c63a5646",
                "36f1f5dc05522ab2"
            ]
        ]
    },
    {
        "id": "36f1f5dc05522ab2",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "deleteRow",
        "func": "const row = flow.get(\"selectedRow\")\nmsg.payload = {\n    command : \"deleteRow\",\n    arguments : [row.id]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1520,
        "wires": [
            [
                "3789d5c2f4c89ab8"
            ]
        ]
    },
    {
        "id": "bf411d37c20d0a07",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "jsonstring",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1480,
        "wires": []
    },
    {
        "id": "59c42756e8e0a6b9",
        "type": "mqtt out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "topic": "b6610502153/table2",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "dd5b95eac365fed1",
        "x": 400,
        "y": 1420,
        "wires": []
    },
    {
        "id": "29a5028a2dab03d5",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "read secondbox.txt to table",
        "func": "var parsedRows = [];\nvar rows = msg.payload.split('\\n');\n\nrows.forEach(function(row) {\n    row = row.trim();\n\n    if (row !== \"\") {\n        var parsedRow = JSON.parse(row);\n        var rowData = parsedRow.arguments[0][0];\n        parsedRows.push(rowData);\n    }\n});\n\nmsg.payload = parsedRows;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1240,
        "wires": [
            [
                "3789d5c2f4c89ab8"
            ]
        ]
    },
    {
        "id": "2ea5a21dcc971131",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 930,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "44a19f235d3b4953",
        "type": "mqtt in",
        "z": "7f1a0e143fa561dd",
        "g": "290dc16118e39c21",
        "name": "",
        "topic": "b6610502153/ntpTime",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "dd5b95eac365fed1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "880c86a10d22da2b"
            ]
        ]
    },
    {
        "id": "880c86a10d22da2b",
        "type": "ui_text",
        "z": "7f1a0e143fa561dd",
        "g": "290dc16118e39c21",
        "group": "0833111ad3e27a52",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "4e344238952961e1",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox_simple.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 380,
        "y": 740,
        "wires": [
            [
                "47ee0ad3129a8deb"
            ]
        ]
    },
    {
        "id": "e9b0873ef92bb112",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox_simple.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 940,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5804bc74c37dd1",
        "type": "ui_button",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "group": "7c4cf0f08ed23009",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Delete Row",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 720,
        "y": 800,
        "wires": [
            [
                "585333964a1cceec",
                "aa60f2ccf4111705"
            ]
        ]
    },
    {
        "id": "b2d1b2c1f6fbe42a",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox_simple.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 420,
        "y": 1480,
        "wires": [
            [
                "bf411d37c20d0a07"
            ]
        ]
    },
    {
        "id": "b8d6186c1918c869",
        "type": "file",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox_simple.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 960,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "9ae72f72e87cf890",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 380,
        "wires": [
            [
                "a9d7a303130bec2c"
            ]
        ]
    },
    {
        "id": "a9d7a303130bec2c",
        "type": "file in",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "filename": "/data/firstbox_simple.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 950,
        "y": 380,
        "wires": [
            [
                "47a12f52e1eda558"
            ]
        ]
    },
    {
        "id": "b2f5865088ce6c32",
        "type": "mqtt out",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "topic": "b6610502153/table2",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "dd5b95eac365fed1",
        "x": 1260,
        "y": 1060,
        "wires": []
    },
    {
        "id": "c24e216588f29be9",
        "type": "file in",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "filename": "/data/secondbox_simple.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 980,
        "y": 1060,
        "wires": [
            [
                "b2f5865088ce6c32"
            ]
        ]
    },
    {
        "id": "0afe2c957db7b5b0",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "c24e216588f29be9"
            ]
        ]
    },
    {
        "id": "47ee0ad3129a8deb",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "jsonstring",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 740,
        "wires": []
    },
    {
        "id": "47a12f52e1eda558",
        "type": "mqtt out",
        "z": "7f1a0e143fa561dd",
        "g": "be979b25b7dab37a",
        "name": "",
        "topic": "b6610502153/table1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "dd5b95eac365fed1",
        "x": 1340,
        "y": 380,
        "wires": []
    },
    {
        "id": "ecd9d02e6782d24f",
        "type": "function",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "732cda7a4ca2e5a1",
        "name": "toVar2",
        "func": "var inputObject = msg.payload;\nvar jsonString = JSON.stringify(inputObject.arguments[0][0]);\nmsg.payload = jsonString;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1180,
        "wires": [
            [
                "f368d564d26eec06"
            ]
        ]
    },
    {
        "id": "f368d564d26eec06",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "732cda7a4ca2e5a1",
        "name": "debug 2 - jsonstring",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1180,
        "wires": []
    },
    {
        "id": "87f4e87b2a463b4a",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "37974fd28da1ed36",
        "name": "files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 780,
        "wires": []
    },
    {
        "id": "f149570bac6bb5b4",
        "type": "fs-file-lister",
        "z": "7f1a0e143fa561dd",
        "g": "37974fd28da1ed36",
        "name": "",
        "start": "/data",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": false,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 2100,
        "y": 780,
        "wires": [
            [
                "87f4e87b2a463b4a"
            ]
        ]
    },
    {
        "id": "9de71e9ee10e0fe6",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "g": "37974fd28da1ed36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1840,
        "y": 780,
        "wires": [
            [
                "f149570bac6bb5b4"
            ]
        ]
    },
    {
        "id": "06c0757b621ade17",
        "type": "http request",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "37974fd28da1ed36",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://172.20.10.2:5000/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2070,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "0dc01046749982b6",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "37974fd28da1ed36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1850,
        "y": 620,
        "wires": [
            [
                "06c0757b621ade17"
            ]
        ]
    },
    {
        "id": "ecdbf6baa55f03a1",
        "type": "http request",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "37974fd28da1ed36",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "https://iot.cpe.ku.ac.th/red/b6610502153/test/firstbox_simple.txt",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1970,
        "y": 680,
        "wires": [
            [
                "53d12dc3473bcad0"
            ]
        ]
    },
    {
        "id": "9c0dbf699ebdacf0",
        "type": "inject",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "37974fd28da1ed36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1790,
        "y": 680,
        "wires": [
            [
                "ecdbf6baa55f03a1"
            ]
        ]
    },
    {
        "id": "53d12dc3473bcad0",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "d": true,
        "g": "37974fd28da1ed36",
        "name": "request http",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 680,
        "wires": []
    },
    {
        "id": "0d6e0e769b6d3d89",
        "type": "debug",
        "z": "7f1a0e143fa561dd",
        "g": "732cda7a4ca2e5a1",
        "name": "nested from file ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1140,
        "wires": []
    },
    {
        "id": "97fdae955f657b7b",
        "type": "static",
        "z": "7f1a0e143fa561dd",
        "g": "79464c79620f0cbc",
        "name": "",
        "folder": "/data/",
        "x": 1190,
        "y": 260,
        "wires": [
            [
                "9eba93e7ca981ecc"
            ]
        ]
    },
    {
        "id": "9eba93e7ca981ecc",
        "type": "http response",
        "z": "7f1a0e143fa561dd",
        "g": "79464c79620f0cbc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1370,
        "y": 260,
        "wires": []
    },
    {
        "id": "ab69f7d81ab5cc48",
        "type": "http in",
        "z": "7f1a0e143fa561dd",
        "g": "79464c79620f0cbc",
        "name": "",
        "url": "/test/*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 980,
        "y": 260,
        "wires": [
            [
                "97fdae955f657b7b"
            ]
        ]
    },
    {
        "id": "141d021b819b9557",
        "type": "link in",
        "z": "dfe7fed51c1dc8f6",
        "name": "Control in 1",
        "links": [
            "42d792911d87f35a",
            "6ce3c7d556f2330b",
            "9f5c4b418784af13",
            "af3d0f588806a8cf"
        ],
        "x": 435,
        "y": 120,
        "wires": [
            [
                "015e3669744ae7d8"
            ]
        ]
    },
    {
        "id": "015e3669744ae7d8",
        "type": "ui_ui_control",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "events": "all",
        "x": 560,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "65f76587f72019e3",
        "type": "ui_ui_control",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "beec64e0b35424b6"
            ]
        ]
    },
    {
        "id": "beec64e0b35424b6",
        "type": "change",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data\",\"Dashboard_Row\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "015e3669744ae7d8"
            ]
        ]
    },
    {
        "id": "bd9cd6871c9fa8b1",
        "type": "link in",
        "z": "dfe7fed51c1dc8f6",
        "name": "Control in 2",
        "links": [
            "38dfef8347ef9f78",
            "89718abc3a1128d7",
            "920c742796e1e8a2",
            "d4c92a5276c809f5"
        ],
        "x": 435,
        "y": 280,
        "wires": [
            [
                "38f0abd189b1581a"
            ]
        ]
    },
    {
        "id": "38f0abd189b1581a",
        "type": "ui_ui_control",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "events": "all",
        "x": 560,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "66ad2dfb34e86b64",
        "type": "ui_ui_control",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "e2d5b7bbb67a1a5f"
            ]
        ]
    },
    {
        "id": "e2d5b7bbb67a1a5f",
        "type": "change",
        "z": "dfe7fed51c1dc8f6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Data\",\"Dashboard_Row\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 340,
        "wires": [
            [
                "38f0abd189b1581a"
            ]
        ]
    }
]